===========================
Testing 2-matrix_divided.py
===========================
The module has only one function ``matrix_divided()`` that returns a new matrix with elements scalar divided

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

================
Testing examples
================

Testing function with scalar division with single digit div
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1]], 3)
    [[1.33, 1.67, 1.0], [0.67, 2.0, 0.33]]

With scalar division with mulit-digit div
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1]], 33)
    [[0.12, 0.15, 0.09], [0.06, 0.18, 0.03]]

with scalar division with large div
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1]], 333)
    [[0.01, 0.02, 0.01], [0.01, 0.02, 0.0]]

with scalar division with larger div
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1]], 3333)
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

With scalar division with negative div
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1]], -3)
    [[-1.33, -1.67, -1.0], [-0.67, -2.0, -0.33]]

With scalar division with different sized matrix
::
    >>> matrix_divided([[4, 5, 3], [2, 6, 1], [-1, -2, -3]], -1)
    [[-4.0, -5.0, -3.0], [-2.0, -6.0, -1.0], [1.0, 2.0, 3.0]]

with scalar division with floats
::
    >>> matrix_divided([[1.2, 2.2, 3.2], [4.2, 5.2, 6.2]], 1.2)
    [[1.0, 1.83, 2.67], [3.5, 4.33, 5.17]]

With None arguments
::
    >>> matrix_divided(None, None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

With incorrect matrix argument
::
    >>> matrix_divided({9, 8, 7}, 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

With list of None
::
    >>> matrix_divided([None], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

With list of incorrect type
::
    >>> matrix_divided(["string"], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

With incorrect type for element in matrix
::
    >>> matrix_divided([["string"], ["here"]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

With rows of different lengths
::
    >>> matrix_divided([[1, 2, 3], [4, 8, 7, 9], [2]], 1.5)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

With division by 0
::
    >>> matrix_divided([[1, 2, 3], [5, 6, 7]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

With incorrect type
::
    >>> matrix_divided([[1, 2, 3], [5, 6, 7]], "ab")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

With float('inf')
::
    >>> matrix_divided([[1, 2, 3], [5, 6, 7]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

With one args
::
    >>> matrix_divided([[1, 2, 3], [5, 6, 7]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

With zero args
::
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
