# 0-add_integer.txt

========================
Testing 0-add_integer.py
========================

This module contains one function ``def add_integer(a, b=98)`` that adds two integers

Importing the fucntion from the module:
    >>> add_integer = __import__("0-add_integer").add_integer

Checking the function:
    >>> f = __import__("0-add_integer").add_integer.__doc__

=======
numbers
=======

Checking whether the function works with positive:
::
    >>> add_integer(4, 6)
    10

With both a positive and a negative:
::
    >>> add_integer(-4, -6)
    -10

With a negative and a positive:
::
    >>> add_integer(-4, 6)
    2

With an int and a float:
::
    >>> add_integer(2.5, 3)
    5

With a float and int:
::
    >>> add_integer(2, 3.6)
    5

With both float:
::
    >>> add_integer(3.92, 3.6)
    6

with long int:
::
    >>> add_integer(88888888, 11111112)
    100000000

With multiple values
::
    >>> [add_integer(i, i ** 2) for i in range(6)]
    [0, 2, 6, 12, 20, 30]

===========
non-numbers
===========
with passed NaN
::
    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

with pased inf
::
    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

with non-number and a number:
::
    >>> add_integer([1], 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

with number and non-number:
::
    >>> add_integer(2, "b")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

with non-number and non-number
::
    >>> add_integer((2,), {"key": "value"})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

with bool value and int
::
    >>> add_integer(True, 4)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

with int and bool value
::
    >>> add_integer(2, True)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

==========
No of args
==========
with one arg
::
    >>> add_integer(2)
    100

with more than 2 args
::
    >>> add_integer(0, 1, 2)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
